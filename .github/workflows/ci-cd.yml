name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main  
  workflow_dispatch:

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${matrix.node-version}
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}
      
      
      - name: Test Backend
        run: |
          cd backend
          npm install
          npm test 

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.node-version}}
      
      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build
      
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Upload Backend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ matrix.node-version }}
          path: backend/

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/build
    
          
  deploy:
    runs-on: ubuntu-latest 
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Backend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build-18

      - name: Download Frontend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-18

      - name: Deploy Backend to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd frontend
          vercel --prod --token $VERCEL_TOKEN --yes

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify Discord on Success
        if: needs.deploy.result == 'success'
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "Deployment Successful",
                   "description": "Both frontend and backend have been deployed successfully!",
                   "color": 3066993,
                   "fields": [
                     {
                       "name": "Backend",
                       "value": "Deployed to Render",
                       "inline": true
                     },
                     {
                       "name": "Frontend", 
                       "value": "Deployed to Vercel",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "'${{ github.event.head_commit.message }}'",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORDBOT }}

      - name: Notify Discord on Failure
        if: needs.deploy.result == 'failure'
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "Deployment Failed",
                   "description": "Deployment failed. Please check the logs for details.",
                   "color": 15158332,
                   "fields": [
                     {
                       "name": "Repository",
                       "value": "'${{ github.repository }}'",
                       "inline": true
                     },
                     {
                       "name": "Branch",
                       "value": "'${{ github.ref_name }}'",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "'${{ github.event.head_commit.message }}'",
                       "inline": false
                     },
                     {
                       "name": "View Logs",
                       "value": "[Click here]('${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}')",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORDBOT }}



  

















