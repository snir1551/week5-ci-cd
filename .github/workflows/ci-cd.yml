name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main  
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Test Backend
        run: |
          cd backend
          npm install
          npm test
      
      - name: Test Frontend
        run: |
          cd frontend
          npm install
          npm test # Ensure 'npm test' is configured in frontend/package.json

  build_and_push_docker_images:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:${{ github.sha }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app:${{ github.sha }}
          
  # deploy:
  #   runs-on: ubuntu-latest 
  #   needs: build_and_push_docker_images # Or your actual build job if different
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
      
  #     # Example: Download artifacts if needed by deployment (not typical if using Docker images from registry)
  #     # - name: Download Backend Build Artifact 
  #     #   uses: actions/download-artifact@v4
  #     #   with:
  #     #     name: backend-build-18 # Adjust if matrix strategy changes or artifacts are different

  #     # - name: Download Frontend Build Artifact
  #     #   uses: actions/download-artifact@v4
  #     #   with:
  #     #     name: frontend-build-18 # Adjust as above

  #     - name: Deploy Backend to Render
  #       run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }} # This would typically pull the new image from Docker Hub

  #     - name: Install Vercel CLI
  #       run: npm install -g vercel

  #     - name: Deploy Frontend to Vercel
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #       run: |
  #         # This deployment might need to be adapted if Vercel is to pull a Docker image
  #         # Or if it still builds from source, ensure it checks out the correct commit
  #         cd frontend 
  #         vercel --prod --token $VERCEL_TOKEN --yes

  notify:
    runs-on: ubuntu-latest
    needs: build_and_push_docker_images # Changed from 'deploy'
    if: always()
    steps:
      - name: Notify Discord on Success
        if: needs.build_and_push_docker_images.result == 'success' # Changed from 'deploy'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORDBOT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} # Pass username for constructing image names
        run: |
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "CI Pipeline Successful: Docker Images Ready",
              "description": "Backend and frontend Docker images have been built and pushed to Docker Hub.",
              "color": 3066993,
              "fields": [
                {
                  "name": "Backend Image",
                  "value": "${DOCKERHUB_USERNAME}/backend-app:${{ github.sha }}",
                  "inline": true
                },
                {
                  "name": "Frontend Image", 
                  "value": "${DOCKERHUB_USERNAME}/frontend-app:${{ github.sha }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "${{ github.event.head_commit.message }}",
                  "inline": false
                },
                {
                  "name": "View Workflow Run",
                  "value": "[Click here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
          curl -H "Content-Type: application/json" -X POST -d @payload.json "$DISCORD_WEBHOOK"

      - name: Notify Discord on Failure
        if: needs.build_and_push_docker_images.result == 'failure' # Changed from 'deploy'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORDBOT }}
        run: |
          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "CI Pipeline Failed: Docker Build/Push Error",
              "description": "The Docker image build or push process failed. Please check the logs for details.",
              "color": 15158332,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "${{ github.event.head_commit.message }}",
                  "inline": false
                },
                {
                  "name": "View Logs",
                  "value": "[Click here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF
          curl -H "Content-Type: application/json" -X POST -d @payload.json "$DISCORD_WEBHOOK"






















