name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main  
  workflow_dispatch:

jobs:

  test:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache Backend Dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      
      - name: Cache Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      
      - name: Test Backend
        run: |
          cd backend
          npm install
          npm test
      
      - name: Test Frontend
        run: |
          cd frontend
          npm install
          npm test -- --coverage --watchAll=false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache Backend Dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      
      - name: Cache Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
      
      - name: Prepare Backend for Production
        run: |
          cd backend
          npm install --production

  upload_artifacts:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
      
      - name: Upload Frontend Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 30
      
      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-source
          path: backend/
          retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: upload_artifacts
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend-build
      
      - name: Download Backend Artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-source
          path: ./backend-source
      
      - name: Deploy to Production (Simulation)
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "üìÅ Frontend build files:"
          ls -la ./frontend-build
          echo "üìÅ Backend source files:"
          ls -la ./backend-source
          echo "‚úÖ Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, build, upload_artifacts, deploy]
    if: always()
    
    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment successful! Application is now live."
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "‚ÑπÔ∏è  Deployment skipped (not main branch)."
          else
            echo "‚ùå Deployment failed. Please check the logs."
          fi
          
          echo "üìä Pipeline Summary:"
          echo "  - Lint: ${{ needs.lint.result }}"
          echo "  - Test: ${{ needs.test.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Upload: ${{ needs.upload_artifacts.result }}"
          echo "  - Deploy: ${{ needs.deploy.result }}"



